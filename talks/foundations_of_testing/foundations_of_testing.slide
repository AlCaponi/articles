Testing
Foundations of Testing
15:04 2 Jan 2006
Tags: foo, bar, baz

Michael Ingold
Software Engineer, Leuchter AG
michael.ingold@leuchterag.ch
http://michaelingold.ch/
@michaelingold


* Agenda

We'll go back and forth between inputs and exercises!

- Input: Testing Foundations
- Ex: Setting up basic tests, test execution
- Input: Mocking & Faking
- Ex: Mocking and Faking
- Input: Integration Testing
- Ex: Integration Testing

* Why we test ...
- ... because we're engineers, not script-kiddies!
- to build confidence in our code
- to validate our work
- to gain speed for changes and refactorings
- to be open to change
- to have the best documentation that is always up to date
- break down complexity
- prevent or crack down on technical debt
- reduce or deprecate our manual testing effort

- KEEP THE COST OF CHANGE LOW!!!

* Cost of Change
.image res/images/responsivness_of_change.png _ 700

* Right tools for the right abstraction:
.image res/images/testing_pyramid_detailed.png _ 700

* Approaches

- ATDD – Acceptance Test Driven Development
Specify a feature first with a test, then implement.

- TDD – Test Driven Development
Red – green – refactor. Test a little – code a little.

- DDT – Defect Driven Testing
Write a unit test that reproduces the defect – Fix code – Test will succeed – Defect will never return.

- POUTing – Plain Old Unit Testing
Aka test after. Write unit tests to check existing code. You cannot and probably do not want to test drive everything. Use POUT to increase sanity. Use to add additional tests after TDDing (e.g. boundary cases).


* Unit-Testing

* Design for testability
- Simplicity
Objects have to be easily creatable. Otherwise, easy and fast testing is not
possible. Pass dependencies and configuration/parameters into the constructor.

- Abstraction
Use abstraction layers at system boundaries (database, file system, webservices, ...) that simplify unit testing by enabling the usage of fakes.

* Structure of a Unit Test (2)
- Arrange – Act – Assert
Structure the tests always by AAA. Never mix these three blocks.

- Test Assemblies
Create a test assembly for each production assembly and name it as the production assembly + “.Test”/”.Facts”/… .

- Test Namespace
Put the tests in the same namespace as their associated testee.

- Unit Test Methods Show Whole Truth
Unit test methods show all parts needed for the test. Do not use SetUp method or base classes to perform actions on testee or dependencies.

* Structure of a Unit Test (2)
- SetUp / TearDown for Infrastructure Only
Use the SetUp / TearDown methods only for infrastructure that your unit
test needs. Do not use it for anything that is under test.

- Test Method Naming
Use a pattern that reflects behaviour of tested code, e.g. Behaviour[_OnTrigger][_WhenScenario].

  LoadUserSettings_WhenUnAuthenticated(...)
  SaveDocument_OnSaveAll_WhenDiskFull(...)

* Unit Tests in Visual Studio
- VS already comes with a ready-to-use test runner ( Test -> Windows -> Test Explorer).
(With everyhing that is not MsTest, we need an additional test runner, that helps VS discover test methods and classes and run them.)

- There are multiple unit test frameworks like: xUnit, nUnit, MsTest, etc...
(They all come with their own test runners which have to be installed via Nuget.)

- Resharper provides a decent proprietary test runner for xUnit and nUnit.

* Simple test method in C#
We'll be using xUnit!

  public class HostContextTests : ServiceBaseTest
  {
    [Fact]
    public void TestAddService()
    {
      // Setup
      var fakeService = A.Fake<IDataAccessService>();
      var context = new Context();
      Context.WithService(c => fakeService);

      // Act
      var result = Context.GetService<IDataAccessService>();

      // Assert
      result.Should().NotBeNull("HostContext should have returned the implementation for the given service.");
    }
  }

Every test consists of three parts: Arrange, Act and Assert!

* Ex. 1: Setup of a failing test

- Create a new Solution
- Add a new library project
- Pick xUnit or nUnit...
- ... and add a new test class with a test method for the framework you picked.
- make the test fail!


* Unit Test Principles [1]

- Fast
Unit tests have to be fast in order to be executed often. Fast means much
smaller than seconds.

- Isolated
Isolated testee: Clear where the failure happened.
Isolated test: No dependency between tests (random order).

- Repeatable
No assumed initial state, nothing left behind, no dependency on external
services that might be unavailable (databases, file system …).

* Unit Test Principles [2]

- Self-Validating
No manual test interpretation or intervention. Red or green!

- Timely
Tests are written at the right time (TDD, DDT, POUTing)

* Smoke out the bad smells

* Smoke out the bad smells [1]

.code res/code/bad_smells.cs /BEGIN1 OMIT/,/END1 OMIT/

* Smoke out the bad smells [2]

.code res/code/bad_smells.cs /BEGIN2 OMIT/,/END2 OMIT/

* Smoke out the bad smells [3]

.code res/code/bad_smells.cs /BEGIN3 OMIT/,/END3 OMIT/



* Bad smells

- Test Not Testing Anything
- Test Needing Excessive Setup
- Too Large Test / Assertions for Multiple Scenarios
- Checking Internals
- Test Only Running on Developer’s Machine
- Test Checking More than Necessary
- Irrelevant Information
- Chatty Test
- Test Swallowing Exceptions
- Test Not Belonging in Host Test Fixture
- Obsolete Test
- Hidden Test Functionality
- Bloated Construction
- Unclear Fail Reason
- Conditional Test Logic
- Test Logic in Production Code
- Erratic Test

* Ex. 2: Checkout the course repository
Throughout this course we'll be writing a fully functional xml parser. A lot of sample code is already there for you to use. Just checkout the git tag corresponding to the exercise you're currently working on.

- Use git to checkout https://github.com/enzian/tddxmlparser
- Open the solution in VS and run the tests (they should all fail!)
